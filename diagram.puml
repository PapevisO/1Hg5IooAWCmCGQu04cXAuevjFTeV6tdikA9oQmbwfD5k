@startuml

actor "InComm\nsales team" as ist
participant "Location\nmanagement\nGUI helper app\nand API" as lmapi
participant "cache eg.\nRedis or\nMemcached" as cache
participant "event \nAPI" as eapi
participant "AMQP state\nmachine" as amqp

ist -> lmapi: sign in
lmapi -> ist: grant access
ist -> lmapi: post merchant's\nlocations collection
lmapi -> cache
lmapi -> eapi
eapi -> amqp
amqp -> amqp: daemon\npending\nDB master\nunlock

@enduml

@startuml

participant "event \nAPI" as eapi
participant "AMQP state\nmachine" as amqp
participant "PostgreSQL\nreplication\nmaster" as pgm
participant "PostgreSQL\nreplication\nslave No.[0..7]" as pgs

amqp -> amqp: daemon\npending\nDB master\nunlock
amqp <-> pgm: is DB replicate queue empty?
amqp -> eapi: enqueue\nDB lock
eapi -> amqp
cache -> amqp: fetch cached\ncollection
amqp -> pgm: post collection SQL query
amqp -> eapi: enqueue DB\npropagation
eapi -> amqp
amqp -> cache: flush collection
amqp -> eapi: enqueue DB\nunlock
eapi -> amqp

@enduml

@startuml

actor "InComm\nsales team" as ist
participant "Mapping\nservice\nGUI application" as msapp
participant "event \nAPI" as eapi
participant "AMQP state\nmachine" as amqp
participant "PostgreSQL\nreplication\nslave No.[0..7]" as pgs

ist -> msapp: sign in
msapp -> ist: grant access
msapp -> ist: bind browser\nto eventapi\nsocket
ist -> eapi: bind browser\nto eventapi\nsocket
ist -> msapp: submit request
msapp -> eapi: submit request
eapi -> amqp
amqp -> pgs: Mapping service\ndaemon sends\nquery to free\nPostgreSQL\nreplication\nslave
pgs -> ampq: query response
ampq -> cache: process and\ncache response
amqp -> eapi
eapi -> ist
ist -> msapp: request for cached\nprocessed response
msapp <-> cache
msapp -> isd: return coverage/ncollection

@enduml
